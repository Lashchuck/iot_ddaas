name: CI Pipeline

# Uruchamianie pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

# Definiowanie środowiska, na którym uruchamiane są testy
jobs:
  build:
    runs-on: ubuntu-latest

    # Tworzenie kontenera PostgreSQL
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: ddaas_test
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5
        volumes:
          - ./docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d

    # Pobieranie kodu z repozytorium (Checkout code)
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Ustawienie środowiska JDK
      - name: Set up JDK 22
        uses: actions/setup-java@v3
        with:
          java-version: '22'
          distribution: 'temurin'

      - name: Install Docker Compose
        run: sudo apt-get update && sudo apt-get install docker-compose

      - name: Check Docker version
        run: docker --version

      - name: Start PostgreSQL service
        run: docker-compose up -d postgres

      - name: List Docker containers
        run: docker ps -a

      - name: Set enviroment variable for PostgreSQL
        run: echo "SPRING_DATASOURCE_URL=jdbc:postgresql://localhost:5433/ddaas_test" >> $GITHUB_ENV

      - name: Print enviroment variables
        run: printenv | grep SPRING_DATASOURCE_URL

      - name: Get PostgreSQL container ID
        id: get_container_id
        run: echo "POSTGRES_CONTAINER_ID=$(docker ps -q --filter 'publish=5433')" >> $GITHUB_ENV

      - name: Check if PostgreSQL container is running
        run: docker exec -i ${{ env.POSTGRES_CONTAINER_ID }} psql -U postgres -d ddaas_test -c "SELECT 1;"

      - name: Initialize database schema
        run: |
          docker exec -i ${{ env.POSTGRES_CONTAINER_ID }} psql -U postgres -d ddaas_test -c "CREATE SCHEMA IF NOT EXISTS test_schema;"

      - name: Check PostgreSQL logs
        run: docker logs ${{ env.POSTGRES_CONTAINER_ID }}

      - name: Wait for PostgreSQL to start
        run:  |
          echo "Waiting for PostgreSQL to be ready..."
          sleep 10
          until pg_isready -h localhost -p 5433 -U postgres; do
            sleep 1
          done

      # Budowanie aplikacji i uruchomienie testów. Wykonanie komendy Mavena mvn clean install
      - name: Build with Maven and run tests
        run: mvn clean install -DskipTests=false

      # Uruchamianie testów aplikacji
      - name: Run tests
        run: mvn test

      - name: Verify test_schema creation
        run: docker exec -i ${{ env.POSTGRES_CONTAINER_ID }} psql -U postgres -d ddaas_test -c "SELECT schema_name FROM information_schema.schemata WHERE schema_name = 'test_schema';"

      - name: List files in target directory
        run: ls -R target

      # Zamknięcie wszystkich kontenerów po zakończeniu testów pipeline
      - name: Stop Docker Compose
        run: docker-compose down

      - name: Upload test reports
        uses: actions/upload-artifact@v3
        with:
          name: surefire-reports
          path: target/surefire-reports/
